// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              Int                 @id @default(autoincrement())
  username        String              @unique
  email           String              @unique
  password        String
  fullname        String
  phone           String?
  address         String?
  city            String?
  role            Role
  status          Status
  organization    OrganizationDetail?
  volunteerDetail VolunteerDetail?
  accessToken     String?
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt

  Registrations Registration[]
  Reports       Report[]
  Events        Event[]        @relation("OrganizerEvents")

  @@map("users")
}

enum Role {
  admin
  volunteer
  mitra
  super_admin
}

enum Status {
  active
  inactive
}

model VolunteerDetail {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  skills        String
  education     String
  other_details String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("volunteer_details")
}

model OrganizationDetail {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  name       String
  address    String   @db.VarChar(300)
  focus      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("organization_details")
}

model Event {
  id           Int      @id @default(autoincrement())
  organizer_id Int
  title        String
  description  String   @db.Text
  date         DateTime
  location     String
  slots_needed Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  organizer     User           @relation(fields: [organizer_id], references: [id], name: "OrganizerEvents")
  Registrations Registration[]
  Reports       Report[]

  @@map("events")
}

model Registration {
  id           Int      @id @default(autoincrement())
  volunteer_id Int
  event_id     Int
  status       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  volunteer User  @relation(fields: [volunteer_id], references: [id])
  event     Event @relation(fields: [event_id], references: [id])

  @@map("registrations")
}

model Report {
  id           Int      @id @default(autoincrement())
  event_id     Int
  volunteer_id Int
  feedback     String?  @db.Text
  created_at   DateTime @default(now())

  event     Event @relation(fields: [event_id], references: [id])
  volunteer User  @relation(fields: [volunteer_id], references: [id])

  @@map("reports")
}
