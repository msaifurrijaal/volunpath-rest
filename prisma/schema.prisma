generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique
  email              String              @unique
  password           String
  fullname           String
  phone              String?
  image              String?
  address            String?
  city               String?
  role               Role
  status             Status
  organizationDetail OrganizationDetail?
  volunteerDetail    VolunteerDetail?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt

  Registrations Activity[]
  Reports       Report[]
  Events        Event[]    @relation("OrganizerEvents")

  @@map("users")
}

enum Role {
  admin
  volunteer
  organization
  super_admin
}

enum Status {
  active
  inactive
}

model VolunteerDetail {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  skills        String
  education     String
  other_details String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("volunteer_details")
}

model OrganizationDetail {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  name        String
  address     String   @db.VarChar(300)
  focus       String
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("organization_details")
}

model Event {
  id              Int         @id @default(autoincrement())
  organizer_id    Int
  title           String
  description     String      @db.Text
  additional_info String?     @db.Text
  date            DateTime
  location        String
  image           String?
  slots_needed    Int
  slots_available Int
  category_id     Int?
  status          StatusEvent
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  organizer     User           @relation(fields: [organizer_id], references: [id], name: "OrganizerEvents")
  category      CategoryEvent? @relation(fields: [category_id], references: [id])
  Registrations Activity[]
  Reports       Report[]

  @@map("events")
}

enum StatusEvent {
  open_registration
  in_progress
  completed
  cancelled
}

model Activity {
  id              Int            @id @default(autoincrement())
  volunteer_id    Int
  event_id        Int
  status          StatusActivity
  statusPayment   StatusPayment
  motivation      String         @db.Text
  additional_info String?        @db.Text
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  volunteer User  @relation(fields: [volunteer_id], references: [id])
  event     Event @relation(fields: [event_id], references: [id])

  @@map("activities")
}

enum StatusPayment {
  pending
  approved
  cancelled
}

enum StatusActivity {
  pending
  approved
  rejected
  cancelled
  quotaFull
}

model Report {
  id           Int      @id @default(autoincrement())
  event_id     Int
  volunteer_id Int
  feedback     String?  @db.Text
  created_at   DateTime @default(now())

  event     Event @relation(fields: [event_id], references: [id])
  volunteer User  @relation(fields: [volunteer_id], references: [id])

  @@map("reports")
}

model CategoryEvent {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  events Event[]

  @@map("category_events")
}
